#!/usr/bin/python

import sys
import re
import subprocess
import os.path

def get_commits(old_rev, new_rev):
    p = subprocess.Popen(['git', 'log', '--pretty=format:%H', '--reverse',  
                          '%s..%s' % (old_rev, new_rev)], 
                         stdout=subprocess.PIPE)
    commit_ids = p.stdout.read().split('\n')
    commits = []
    for id in commit_ids:
        p = subprocess.Popen(['git', 'show', '-s', '%s' % id],
                        stdout=subprocess.PIPE)
        info = p.stdout.read().split('\n')
        commits.append({'id': info[0], 'author': info[1], 'date': info[2], 'message': ''.join(info[3:]).strip()})
    return commits

def main():
    lines = sys.stdin.readlines()

    # parse log
    commits = []
    for line in lines:
        old_rev, new_rev, ref_name = line.split()
        commits.extend(get_commits(old_rev, new_rev))

    # now parse commits
    from django.core.management import setup_environ
    install_dir = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), '..'))
    sys.path.append(install_dir)
    sys.path.append(install_dir + '/kit')
    import settings
    setup_environ(settings)
    from kit.issues.models import Issue, Comment

    for c in commits:
        m = re.search(r'#\d+', c['message'])
        if m is None:
            continue
        # identify issue
        try:
            id = int(m.group(0)[1:])
            issue = Issue.objects.get(pk=int(id))
        except Issue.DoesNotExist, ValueError:
            print "error parsing ", m.group(0)
            continue
        # get author
        try:
            rez = re.search(r'<(.*)>', c['author'])
            if rez:
                email = rez.group(0)[1:-1]
                author = User.objects.get(email=email)
            else:
                assert False
        except:
            author = issue.reporter

        # Notify anyhow
        msg = '**%s**: \n\n %s' % (c['id'], c['message'])
        Comment.changed(author, issue, text=msg)

        # Specific message
        if (('fix #%d' % id) in c['message']) or \
           (('fixes #%d' % id) in c['message']) or \
           (('close #%d' % id) in c['message']):
            print "Fixes ", id,
            if issue.status != 'f':
                issue.status = 'f'
                issue.save()
                Comment.changed(author, issue, changes=dict(status=('','Fixed')))


if __name__ == '__main__':
    main()
